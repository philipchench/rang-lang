
Statement support: conditional, iteration
Arithmetics, variables, primitives, functions
Data structures:
List: supports access by index, append, del
Later: dictionary and set

Supports:
if ㄧㄈ, elif ㄝㄌㄧㄈ, else ㄝㄌㄙ
and ㄚㄙㄉ, or ㄛㄦ, not ㄋㄊ, in ㄧㄣ, is ㄧㄙ
True ㄔㄖㄨ, False ㄈㄌㄙ, None ㄋㄌ
del ㄉㄌ
for ㄈㄦ, while ㄨㄌ, break ㄅㄖㄎ, continue ㄎㄣㄊㄋ, 
def ㄈㄣㄎ, return ㄖㄊㄦㄣ, pass ㄆㄙ
Python built-in functions: range() ㄖㄣㄓ, len() ㄌㄣ, print() ㄆㄖㄣㄊ

Arithmetics:
+ ㄆㄌ, - ㄇㄣ, * ㄇㄌ, / ㄉㄧ, // ㄈㄉ, ** ㄆㄠ, % ㄇㄉ
> ㄍㄦ, < ㄌㄙ, = ㄝㄎ, >= ㄍㄦㄝㄎ, <= ㄌㄙㄝㄎ, == ㄝㄝㄎ, != ㄋㄝㄎ
Scope:
() （）
no indentation for scope, use ：。

Misc:
space
, 、
. ．
: ：
comment: ＃
'', “” e.g. “this is a string”
numbers:
ㄧ二三四五六七八九零點 

Primitives:
boolean, int, float/double, str

Data structures:
list: [], append() ㄚㄆㄟㄣ（）, 
「」
dictionary: {}, most methods
『』
set?
tuple?

Example:

var1 ㄝㄎ 三
var2 ㄝㄎ 二
var3 ㄝㄎ var1 * var2

def test(input1, input2):
  dict1 = {}
  for i in range(input1):
    dict1[i] = []
    j = 0
    while j < len(input2):
      dict1[i].append(input2[j] * i)
      j += 1
  return dict1

list1 = [1, 2, 3, 4, 5]
list1.append(var3) # 6
print("輸出： " + test(3, list1))

Python3:

var1 = 3
var2 = 2
var3 = var1 * var2

def test(input1, input2):
  dict1 = {}
  for i in range(input1):
    dict1[i] = []
    j = 0
    while j < len(input2):
      dict1[i].append(input2[j] * i)
      j += 1
  return dict1

list1 = [1, 2, 3, 4, 5]
list1.append(var3) # 6
print("輸出： " + test(3, list1))


