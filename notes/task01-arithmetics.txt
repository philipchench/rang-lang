supports single statements for variable declarations, only int and float
variable declaration: variable names
basic arithmetics, +, - , *, /, /_, **, %, (, )
end line: ;
stdout: out(), comma (,)
comment: //

example:
x = 3;
y = 2;
z = (x + y) * x - y ** (x % 10);
out(z); // 7

<program> ::= { <statement> }
<statement> ::= <exp> ";"
<exp> ::= <id> "=" <additive-exp>
<additive-exp> ::= <term> { ("+" | "-") <term> }
<term> ::= <factor> { ("*" | "/") <factor> }
<factor> ::= "(" <exp> ")" | <unary_op> <factor> | <int> | <id> | <function-call>
<unary_op> ::= "-"
<function-call> ::= <id> "(" [ <exp> { "," <exp> } ] ")"

program = Program(list of statements)
statement = Exp(exp)
exp = Assign(string, exp (only some))
            | Var(string)
            | BinOp(bin_op, exp, exp)
            | UnaryOp(unary_op, exp)
            | Const(number)
            | FunctionCall(string, exp_list)
number = Int(int)
        | Float(float)

tokens:
{  // not yet
}  // not yet
(
)
=
+
-
*
/
floor()
**
%
;
id string (out is also an identifier) // no lexeme code for variable values.
integer 0~9
float 0~9 . 0~9
,
//

OPEN_BRACKET = 0
CLOSE_BRACKET = 1
OPEN_PAREN = 2
CLOSE_PAREN = 3
ASSIGN = 4
ARITHOP = 5
SEMICOLON = 6
COMMA = 7
ID = 8
INT = 9
FLOAT = 10
